#include "openingtree.hpp"

/* initialize root*/
OpeningTree::Node* OpeningTree::root = new Node();
bool OpeningTree::isInitialized = false;

void OpeningTree::initialize() {
  if (isInitialized) return;
  isInitialized = true;

  int opening[][7][7] = {{{0, 0, 0, 0, 0, 0, 0},  /*               */
                          {0, 3, 0, 4, 0, 0, 0},  /*   X   O       */
                          {0, 0, 2, 0, 0, 0, 0},  /*     O         */
                          {0, 9, 0, 1, 0, 0, 0},  /*   C   X       */
                          {0, 0, 0, 0, 0, 0, 0},  /*               */
                          {0, 0, 0, 0, 0, 0, 0},  /*               */
                          {0, 0, 0, 0, 0, 0, 0}}, /*               */

                         {{0, 0, 0, 0, 0, 0, 0},  /*               */
                          {0, 3, 0, 0, 0, 0, 0},  /*   X           */
                          {0, 9, 2, 4, 9, 0, 0},  /*   C O O C     */
                          {0, 0, 9, 1, 0, 0, 0},  /*     C X       */
                          {0, 0, 0, 0, 0, 0, 0},  /*               */
                          {0, 0, 0, 0, 0, 0, 0},  /*               */
                          {0, 0, 0, 0, 0, 0, 0}}, /*               */

                         {{0, 0, 4, 0, 0, 0, 0},  /*     O         */
                          {0, 3, 0, 0, 0, 0, 0},  /*   X           */
                          {0, 0, 2, 0, 0, 0, 0},  /*     O         */
                          {0, 7, 7, 1, 0, 0, 0},  /*   B B X       */
                          {0, 0, 0, 0, 0, 0, 0},  /*               */
                          {0, 0, 0, 0, 0, 0, 0},  /*               */
                          {0, 0, 0, 0, 0, 0, 0}}, /*               */

                         {{0, 0, 0, 4, 0, 0, 0},  /*       O       */
                          {0, 3, 0, 0, 0, 0, 0},  /*   X           */
                          {0, 0, 2, 0, 0, 0, 0},  /*     O         */
                          {0, 7, 7, 1, 0, 0, 0},  /*   B B X       */
                          {0, 0, 0, 0, 0, 0, 0},  /*               */
                          {0, 0, 0, 0, 0, 0, 0},  /*               */
                          {0, 0, 0, 0, 0, 0, 0}}, /*               */

                         {{0, 0, 0, 0, 0, 0, 0},  /*               */
                          {0, 0, 3, 0, 0, 0, 0},  /*     X         */
                          {0, 0, 2, 4, 5, 0, 0},  /*     O O A     */
                          {0, 7, 0, 1, 0, 0, 0},  /*   B   X       */
                          {0, 0, 0, 0, 0, 0, 0},  /*               */
                          {0, 0, 0, 0, 0, 0, 0},  /*               */
                          {0, 0, 0, 0, 0, 0, 0}}, /*               */

                         {{0, 0, 0, 0, 5, 0, 0},  /*         B     */
                          {0, 0, 3, 4, 0, 0, 0},  /*     X O       */
                          {0, 0, 2, 0, 0, 0, 0},  /*     O         */
                          {0, 7, 0, 1, 0, 0, 0},  /*   A   X       */
                          {0, 0, 0, 0, 0, 0, 0},  /*               */
                          {0, 0, 0, 0, 0, 0, 0},  /*               */
                          {0, 0, 0, 0, 0, 0, 0}}, /*               */

                         {{0, 0, 0, 0, 0, 0, 0},  /*               */
                          {0, 0, 3, 5, 0, 0, 0},  /*     X A       */
                          {0, 0, 2, 5, 0, 0, 0},  /*     O A       */
                          {0, 4, 0, 1, 0, 0, 0},  /*   O   X       */
                          {0, 0, 0, 0, 0, 0, 0},  /*               */
                          {0, 0, 0, 0, 0, 0, 0},  /*               */
                          {0, 0, 0, 0, 0, 0, 0}}, /*               */

                         {{0, 0, 0, 0, 0, 0, 0},  /*               */
                          {0, 0, 3, 0, 0, 0, 0},  /*     X         */
                          {0, 4, 2, 5, 0, 0, 0},  /*   O O A       */
                          {0, 5, 0, 1, 0, 0, 0},  /*   A   X       */
                          {0, 0, 0, 0, 0, 0, 0},  /*               */
                          {0, 0, 0, 0, 0, 0, 0},  /*               */
                          {0, 0, 0, 0, 0, 0, 0}}, /*               */
  }
}

void insert(int opening[7][7]) {

}
